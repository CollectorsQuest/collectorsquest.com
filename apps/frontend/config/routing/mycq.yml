
### MY CQ

mycq_aviary_update_image:
  url:   /mycq/aviary-update-image
  param: { module: mycq, action: aviaryUpdateImage }

mycq_profile:
  url:   /mycq/profile
  param: { module: mycq, action: profile }

mycq_profile_account_info:
  url:   /mycq/profile/account-information
  param: { module: mycq, action: profileAccountInfo }

mycq_profile_create_password:
  url:   /mycq/profile/create-password
  param: { module: mycq, action: createPassword }

mycq_profile_email_preferences:
  url:   /mycq/profile/email-preferences
  param: { module: mycq, action: profileEmailPreferences }

mycq_profile_addresses:
  url:   /mycq/profile/addresses
  param: { module: mycq, action: profileAddresses }

mycq_profile_addresses_new:
  url:   /mycq/profile/addresses/new
  param: { module: mycq, action: profileAddressesNew }

mycq_profile_addresses_edit:
  url:      /mycq/profile/addresses/:id/edit
  class:    sfPropelORMRoute
  param:    { module: mycq, action: profileAddressesEdit }
  options:  { model: CollectorAddress, type: object }
  requirements: { id: '\d+', sf_method: [get, post] }

mycq_profile_addresses_delete:
  url:      /mycq/profile/addresses/:id/delete
  class:    sfPropelORMRoute
  param:    { module: mycq, action: profileAddressesDelete }
  options:  { model: CollectorAddress, type: object }
  requirements: { id: '\d+', sf_method: [get, delete] }

mycq_dropbox:
  url:   /mycq/dropbox
  param: { module: mycq, action: dropbox }

mycq_collections:
  url:   /mycq/collections
  param: { module: mycq, action: collections }

mycq_collection_by_section:
  url:  /mycq/collection/:id/:section
  class: sfPropelRoute
  options: { model: CollectorCollection, type: object, method: getObjectForRoute }
  param: { module: mycq, action: collection }
  requirements: { id: '\d+', sf_method: [get, post] }

mycq_collection_by_slug:
  url:  /mycq/collection/:id/:slug
  class: sfPropelRoute
  options: { model: CollectorCollection, type: object, method: getObjectForRoute }
  param: { module: mycq, action: collection }
  requirements: { id: '\d+', slug: '[\-\w\.]+', sf_method: [get] }

mycq_collection_collectible_create:
  url:  /mycq/collection-collectible/create
  param: { module: mycq, action: collectionCollectibleCreate }

mycq_collectibles_dropbox:
  url:  /mycq/collectibles/0/dropbox
  params: { module: mycq, action: collectibles }

mycq_collectibles_by_slug:
  url:  /mycq/collectibles/:id/:slug
  class: sfPropelRoute
  options: { model: CollectorCollection, type: object, method: getObjectForRoute }
  params: { module: mycq, action: collectibles }
  requirements:
    id: \d+
    slug: '[\-\w\.]+'
    sf_method: [get, post]

mycq_collectible_by_slug:
  url:  /mycq/collectible/:id/:slug
  class: sfPropelRoute
  options: { model: Collectible, type: object, method: getObjectForRoute }
  param: { module: mycq, action: collectible }
  requirements: { id: '\d+', slug: '[\-\w\.]+', sf_method: [get, post] }

mycq_incomplete:
  url:   /mycq/incomplete
  param: { module: mycq, action: incomplete }

mycq_incomplete_collections:
  url:   /mycq/incomplete/collections
  param: { module: mycq, action: incompleteCollections }

mycq_incomplete_collectibles:
  url:   /mycq/incomplete/collectibles
  param: { module: mycq, action: incompleteCollectibles }

mycq_marketplace:
  url:   /mycq/marketplace
  param: { module: mycq, action: marketplace }

mycq_marketplace_sold:
  url:   /mycq/marketplace/sold
  param: { module: mycq, action: marketplaceSold }

mycq_marketplace_purchased:
  url:   /mycq/marketplace/purchased
  param: { module: mycq, action: marketplacePurchased }

mycq_marketplace_settings:
  url:   /mycq/marketplace/settings
  param: { module: mycq, action: marketplaceSettings }

mycq_marketplace_credit_history:
  url:   /mycq/marketplace/credit-history
  param: { module: mycq, action: marketplaceCreditHistory }

mycq_marketplace_promo_codes:
  url:   /mycq/marketplace/promo_codes
  param: { module: mycq, action: marketplacePromoCodes }

mycq_marketplace_promo_code_new:
  url:   /mycq/marketplace/promo_code/new
  param: { module: mycq, action: marketplacePromoCodeNew }

mycq_marketplace_promo_code_delete:
  url:    /mycq/marketplace/promo_code/:id/delete
  class:  sfPropelORMRoute
  options: { model: SellerPromotion, type: object }
  param:  { module: mycq, action: marketplacePromoCodeDelete }
  requirements: { id: '\d+', sf_method: [get, delete] }

mycq_wanted:
  url:   /mycq/wanted
  param: { module: mycq, action: wanted }

mycq_friends:
  url:   /mycq/friends
  param: { module: mycq, action: friends }

mycq_collector_address_new:
  url:    /mycq/addresses/new
  param:  { module: mycq, action: addNewAddress }

mycq_collector_address_edit:
  url:    /mycq/addresses/:id/edit
  class:  sfPropelORMRoute
  options: { model: CollectorAddress, type: object }
  param:  { module: mycq, action: editAddress }
  requirements: { id: '\d+' }

mycq_collector_address_delete:
  url:    /mycq/addresses/:id/delete
  class:  sfPropelORMRoute
  options: { model: CollectorAddress, type: object }
  param:  { module: mycq, action: deleteAddress }
  requirements: { id: '\d+', sf_method: [get, delete] }

mycq_shopping_order_tracking:
  url:   /mycq/order/:uuid/tracking
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: mycq, action: shoppingOrderTracking }
  requirements: { sf_method: [get, post] }

mycq_shopping_order:
  url:   /mycq/order/:uuid
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: mycq, action: shoppingOrder }

mycq_shopping_orders:
  url:   /mycq/orders
  param: { module: mycq, action: shoppingOrders }

mycq_upload_cancel:
  url:   /mycq/upload/:batch/cancel
  param: { module: mycq, action: uploadCancel }
  requirements: { batch: '\w{32}' }

mycq_upload_finish:
  url:   /mycq/upload/:batch/finish
  param: { module: mycq, action: uploadFinish }
  requirements: { batch: '\w{32}' }

mycq:
  url:   /mycq
  param: { module: mycq, action: index }


### MESSAGES

messages_inbox:
  url:    /messages/inbox
  param:  { module: messages, action: inbox }
  requirements: { filter: "^(?|all|read|unread)$" }

messages_sent:
  url:    /messages/sent
  param:  { module: messages, action: sent, filter: all }

messages_show:
  url:    /messages/:thread/show
  class:  sfPropelORMRoute
  param:  { module: messages, action: show }
  options: { model: PrivateMessage, type: object }
  requirements: { thread: "\w{32}" }

messages_compose:
  url:    /messages/compose
  param:  { module: messages, action: compose }

messages_batch_actions:
  url:   /messages/batch-actions
  param: { module: messages, action: batchActions }

messages_thread_actions:
  url:   /messages/thread-actions
  param: { module: messages, action: threadActions }
  requirements: { sf_method: post }
