### AJAX

ajax_typeahead:
  url:   /ajax/typeahead/:section/:page
  param: { module: _ajax, action: typeAhead }
  requirements: { sf_method: [GET], sf_format: json }

ajax_collections:
  url:   /ajax/collections/:section/:page.:sf_format
  param: { module: collections, action: ajax, sf_format: html }
  options: { extra_parameters_as_query_string: true }
  requirements: { sf_format: (?:html|json) }

ajax_collection:
  url:   /ajax/collection/:section/:page.:sf_format
  param: { module: collection, action: ajax, sf_format: html }
  requirements: { sf_method: [GET], sf_format: (?:html|json) }

ajax_collectors:
  url:   /ajax/collectors/:section/:page.:sf_format
  param: { module: collectors, action: ajax, sf_format: html }
  options: { extra_parameters_as_query_string: true }
  requirements: { sf_format: (?:html|json) }

ajax_collector:
  url:   /ajax/collector/:section/:page.:sf_format
  param: { module: collector, action: ajax, sf_format: html }
  requirements: { sf_method: [GET], sf_format: (?:html|json) }

ajax_marketplace:
  url:   /ajax/marketplace/:section/:page.:sf_format
  param: { module: marketplace, action: ajax, sf_format: html }
  options: { extra_parameters_as_query_string: true }
  requirements: { sf_format: (?:html|json) }

ajax_mycq:
  url:   /ajax/mycq/:section/:page.:sf_format
  param: { module: mycq, action: ajax, sf_format: html }
  options: { extra_parameters_as_query_string: true }
  requirements: { sf_format: (?:html|json) }

ajax_shopping:
  url:   /ajax/shopping/:section/:page.:sf_format
  param: { module: shopping, action: ajax, sf_format: html }
  options: { extra_parameters_as_query_string: true }
  requirements: { sf_format: (?:html|json) }

ajax_editable:
  url:   /ajax/editable
  param: { module: _ajax, action: editable }

ajax_editable_load:
  url:   /ajax/editable-load
  param: { module: _ajax, action: editableLoad }

### A&E

aetn_landing:
  url: /history
  param: { module: aent, action: landing }
  requirements: { sf_method: [GET] }

aetn_american_pickers:
  url: /history/american-pickers
  param: { module: aent, action: americanPickers }
  requirements: { sf_method: [GET] }

aetn_pawn_stars:
  url: /history/pawn-stars
  param: { module: aent, action: pawnStars }
  requirements: { sf_method: [GET] }

aetn_storage_wars:
  url: /history/storage-wars
  param: { module: aent, action: storageWars }
  requirements: { sf_method: [GET] }

aetn_collectible_by_slug:
  url:  /aetn/collectible/:id/:slug
  class: cqPropelRoute
  options: { model: Collectible, type: object, method: getObjectForRoute }
  param: { module: aent, action: collectibleFixedMatching }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

### COLLECTIONS

collections:
  url:   /collections
  param: { module: collections, action: index }

collection_by_slug:
  url:  /collection/:id/:slug
  class: cqPropelRoute
  options: { model: CollectorCollection, type: object, method: getObjectForRoute }
  param: { module: collection, action: index }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

collections_by_collector_legacy:
  url:  /collections/by/:collector_slug
  class: sfPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute }
  param: { module: collections, action: collector }
  requirements: { collector_slug: '[\-\w\.]+' }

collections_by_collector:
  url:  /collections/by/:collector_id/:collector_slug
  class: sfPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute }
  param: { module: collections, action: collector }
  requirements: { collector_id: '\d+', collector_slug: '[\-\w\.]+' }

collections_by_tag:
  url:   /collections/tag/:tag
  param: { module: search, action: collections }

### COLLECTORS

legacy_collectors_filter:
  url: /collectors/filter/:sort
  param: { module: collectors, action: index, sort: latest }

collectors:
  url:  /collectors/:sort
  param: { module: collectors, action: index, sort: latest }

collector_verify_email:
  url:  /collector/verify-email/:hash
  class: cqPropelRoute
  param: { module: collector, action: verifyEmail }
  options: { model: CollectorEmail, type: object }

collector_signup:
  url:   /collector/signup/:step
  param: { module: collector, action: signup, step: 1 }
  requirements: { step: '[1-3]' }

collector_dropbox:
  url:  /collector/dropbox
  param: { module: collector, action: dropbox }

collector_me:
  url:  /collector/me
  class: sfPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute }
  param: { module: collector, action: me }

collector_avatar:
  url:  /collector/:id/:size/avatar.jpg
  class: cqPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute }
  param: { module: collector, action: avatar, size: '100x100' }
  requirements: { id: '\d+', size: '\d+x\d+' }

collector_by_slug:
  url:  /collector/:id/:slug
  class: cqPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute, statsd: true }
  param: { module: collector, action: index }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

### SELLERS

sellers:
  url:  /sellers/:sort
  param: { module: collectors, action: index, type: sellers, sort: latest }

### COLLECTIBLES

collectible_by_slug:
  url:  /collectible/:id/:slug
  class: cqPropelRoute
  options: { model: Collectible, type: object, method: getObjectForRoute, statsd: true }
  param: { module: collection, action: collectible }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

collectibles_by_collector:
  url:  /collectibles/by/:id/:slug
  class: cqPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute, statsd: true }
  param: { module: collectibles, action: collectorList, onlyForSale: false }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

collectibles_for_sale_by_collector:
  url:  /collectibles-for-sale/by/:id/:slug
  class: cqPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute, statsd: true }
  param: { module: collectibles, action: collectorList, onlyForSale: true }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

### CHANNELS

channels:
  url:  /channels
  param: { module: channels, action: index }


### SEARCH

search_typeahead:
  url:   /search/typeahead
  param: { module: search, action: ajax }

search_collectibles:
  url:   /search/collectibles
  param: { module: search, action: collectibles }

search_collectibles_for_sale:
  url:   /search/collectibles-for-sale
  param: { module: search, action: collectiblesForSale }

search_collections:
  url:   /search/collections
  param: { module: search, action: collections }

search_collectors:
  url:   /search/collectors
  param: { module: search, action: collectors }

search_videos:
  url:   /search/videos
  param: { module: search, action: videos }

search_blog:
  url:   /search/blog
  param: { module: search, action: blog }

search_advanced:
  url:   /search/advanced
  param: { module: search, action: advanced }

search:
  url:   /search
  param: { module: search, action: index }


### BLOG

blog:
  url:   /blog
  param: { module: _blog, action: index }

blog_post:
  url:   /blog/:slug
  param: { module: _blog, action: post }

blog_page:
  url:   /pages/:slug
  param: { module: _blog, action: page }

### VIDEO

video:
  url:   /video
  param: { module: _video, action: index }

videos:
  url:   /videos
  param: { module: _video, action: index }

### MARKETPLACE

marketplace_categories:
  url: /marketplace/categories
  param: { module: marketplace, action: categories }

marketplace_category_by_slug:
  url: /marketplace/:id/:slug
  class: sfPropelRoute
  options: { model: ContentCategory, type: object }
  param: { module: marketplace, action: browse }
  requirements:
    id: \d+
    sf_method: [GET, POST]

marketplace:
  url: /marketplace
  param: { module: marketplace, action: index }

### SHOPPING

shopping_cart_remove:
  url: /cart/:id/remove
  param: { module: shopping, action: cart, cmd: remove }
  requirements: { id: \d+ }

shopping_cart_checkout:
  url: /cart/checkout
  param: { module: shopping, action: checkout }
  requirements: { sf_method: [post] }

shopping_cart_empty:
  url: /cart/empty
  param: { module: shopping, action: cart, cmd: empty }

shopping_cart:
  url: /cart
  param: { module: shopping, action: cart }
  requirements: { sf_method: [get, post] }

shopping_order_paypal:
  url: /order/:uuid/paypal
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: shopping, action: paypal }
  requirements: { sf_method: [get, post] }

shopping_order_shipping:
  url: /order/:uuid/shipping
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: shopping, action: orderShipping }
  requirements: { sf_method: [get, post] }

shopping_order_pay:
  url: /order/:uuid/pay
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: shopping, action: orderPay }
  requirements: { sf_method: [get, post] }

shopping_order_review:
  url: /order/:uuid/review
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: shopping, action: orderReview }

shopping_order_error:
  url: /order/:uuid/error
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: shopping, action: orderError }

shopping_order_with_hash:
  url: /order/:uuid/:hash
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: shopping, action: order }
  requirements: { sf_method: [get] }

shopping_order:
  url: /order/:uuid
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: shopping, action: order }
  requirements: { sf_method: [get] }

### MY CQ

mycq_aviary_update_image:
  url:   /mycq/aviary-update-image
  param: { module: mycq, action: aviaryUpdateImage }

mycq_profile:
  url:   /mycq/profile
  param: { module: mycq, action: profile }

mycq_profile_account_info:
  url:   /mycq/profile/account-information
  param: { module: mycq, action: profileAccountInfo }

mycq_profile_addresses:
  url:   /mycq/profile/addresses
  param: { module: mycq, action: profileAddresses }

mycq_profile_addresses_new:
  url:   /mycq/profile/addresses/new
  param: { module: mycq, action: profileAddressesNew }

mycq_profile_addresses_edit:
  url:      /mycq/profile/addresses/:id/edit
  class:    sfPropelORMRoute
  param:    { module: mycq, action: profileAddressesEdit }
  options:  { model: CollectorAddress, type: object }
  requirements: { id: '\d+', sf_method: [get, post] }

mycq_profile_addresses_delete:
  url:      /mycq/profile/addresses/:id/delete
  class:    sfPropelORMRoute
  param:    { module: mycq, action: profileAddressesDelete }
  options:  { model: CollectorAddress, type: object }
  requirements: { id: '\d+', sf_method: [get, delete] }

mycq_dropbox:
  url:   /mycq/dropbox
  param: { module: mycq, action: dropbox }

mycq_collections:
  url:   /mycq/collections
  param: { module: mycq, action: collections }

mycq_collection_by_slug:
  url:  /mycq/collection/:id/:slug
  class: sfPropelRoute
  options: { model: CollectorCollection, type: object, method: getObjectForRoute }
  param: { module: mycq, action: collection }
  requirements: { id: '\d+', slug: '[\-\w\.]+', sf_method: [get, post] }

mycq_collection_collectible_create:
  url:  /mycq/collection-collectible/create
  param: { module: mycq, action: collectionCollectibleCreate }

mycq_collectibles_dropbox:
  url:  /mycq/collectibles/0/dropbox
  params: { module: mycq, action: collectibles }

mycq_collectibles_by_slug:
  url:  /mycq/collectibles/:id/:slug
  class: sfPropelRoute
  options: { model: CollectorCollection, type: object, method: getObjectForRoute }
  params: { module: mycq, action: collectibles }
  requirements:
    id: \d+
    slug: '[\-\w\.]+'
    sf_method: [get, post]

mycq_collectible_by_slug:
  url:  /mycq/collectible/:id/:slug
  class: sfPropelRoute
  options: { model: Collectible, type: object, method: getObjectForRoute }
  param: { module: mycq, action: collectible }
  requirements: { id: '\d+', slug: '[\-\w\.]+', sf_method: [get, post] }

mycq_marketplace:
  url:   /mycq/marketplace
  param: { module: mycq, action: marketplace }

mycq_marketplace_settings:
  url:   /mycq/marketplace/settings
  param: { module: mycq, action: marketplaceSettings }

mycq_marketplace_sold:
  url:   /mycq/marketplace/sold
  param: { module: mycq, action: marketplaceSold }

mycq_marketplace_purchased:
  url:   /mycq/marketplace/purchased
  param: { module: mycq, action: marketplacePurchased }

mycq_wanted:
  url:   /mycq/wanted
  param: { module: mycq, action: wanted }

mycq_friends:
  url:   /mycq/friends
  param: { module: mycq, action: friends }

mycq_collector_address_new:
  url:    /mycq/addresses/new
  param:  { module: mycq, action: addNewAddress }

mycq_collector_address_edit:
  url:    /mycq/addresses/:id/edit
  class:  sfPropelORMRoute
  options: { model: CollectorAddress, type: object }
  param:  { module: mycq, action: editAddress }
  requirements: { id: '\d+' }

mycq_collector_address_delete:
  url:    /mycq/addresses/:id/delete
  class:  sfPropelORMRoute
  options: { model: CollectorAddress, type: object }
  param:  { module: mycq, action: deleteAddress }
  requirements: { id: '\d+', sf_method: [get, delete] }

mycq_shopping_order:
  url:   /mycq/order/:uuid
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: mycq, action: shoppingOrder }

mycq_shopping_orders:
  url:   /mycq/orders
  param: { module: mycq, action: shoppingOrders }

mycq_upload_cancel:
  url:   /mycq/upload/:batch/cancel
  param: { module: mycq, action: uploadCancel }
  requirements: { batch: '\w{32}' }

mycq_upload_finish:
  url:   /mycq/upload/:batch/finish
  param: { module: mycq, action: uploadFinish }
  requirements: { batch: '\w{32}' }

mycq:
  url:   /mycq
  param: { module: mycq, action: index }


### SELLER

seller_packages:
  url:   /seller/packages
  param: { module: seller, action: packages }

seller_cancel_payment:
  url: /seller/payment/cancel/:id
  param: { module: seller, action: cancelPayment }
  requirements: { id: '\d+' }

seller_callback_ipn:
  url: /seller/ipn
  param: { module: seller, action: callbackIPN }
  options: { extra_parameters_as_query_string: true }
  requirements: { sf_method: [post] }

seller_shopping_order:
  url:   /seller/order/:uuid
  class: sfPropelRoute
  options: { model: ShoppingOrder, type: object }
  param: { module: seller, action: shoppingOrder }

seller_shopping_orders:
  url:   /seller/orders
  param: { module: seller, action: shoppingOrders }

### TAGS

tag:
  url:   /tag/:tag
  param: { module: search, action: index }

tags:
  url:   /tags/:which
  param: { module: tags, action: tagCloud}
  requirements: { which: '[\-\w\.]+' }

tags_index:
  url:   /tags
  param: { module: tags, action: index }


### CONTENT CATEGORIES

content_category:
  url:  /category/:id/:slug
  class: cqPropelRoute
  options: { model: ContentCategory, type: object }
  param: { module: categories, action: category }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

content_categories:
  url:  /categories
  param: { module: categories, action: index }


### MESSAGES

messages_inbox:
  url:    /messages/inbox/:filter
  param:  { module: messages, action: inbox, filter: all }
  requirements: { filter: "^(?|all|read|unread)$" }

messages_sent:
  url:    /messages/sent
  param:  { module: messages, action: sent, filter: all }

messages_show:
  url:    /messages/:thread/show
  class:  sfPropelORMRoute
  param:  { module: messages, action: show }
  options: { model: PrivateMessage, type: object }
  requirements: { thread: "\w{32}" }

messages_compose:
  url:    /messages/compose
  param:  { module: messages, action: compose }

messages_batch_actions:
  url:   /messages/batch-actions
  param: { module: messages, action: batchActions }


### COMMENTS

comments_add:
  url:    /comments/add
  param:  { module: comments, action: addComment }
  requirements: { sf_method: [post] }

comments_load_more:
  url:    /comments/load-more
  param:  { module: comments, action: loadMoreComments }

comments_unsubscribe:
  url:    /comments/unsubscribe/email/:email/model_class/:model_class/model_pk/:model_pk
  param:  { module: comments, action: unsubscribe }


### GENERAL

login:
  url:   /login
  param: { module: general, action: login }

auto_login:
  url:  /auto-login/:hash
  param: { module: general, action: login }

rpx_token:
  url:   /rpx-token
  param: { module: general, action: RPXTokenLogin }

logout:
  url:   /logout
  param: { module: general, action: logout }

recover_password:
  url:   /recover-password
  param: { module: general, action: recoverPassword }

feedback:
  url:   /feedback
  param: { module: general, action: feedback }

### MISC

misc_guide_to_collecting_shortcut:
  url:   /guide
  param: { module: misc, action: guideToCollectingShortcut }

misc_guide_to_collecting:
  url:   /the-essential-guide-to-collecting
  param: { module: misc, action: guideToCollecting }

misc_guide_download_file:
  url: /the-essential-guide-download/:hash.:sf_format
  param: { module: misc, action: guideDownload }
  requirements: { hash: '\w{10}', sf_format: (?:pdf|zip) }

misc_guide_download:
  url:  /the-essential-guide-download
  param: { module: misc, action: guideDownload }

misc_guide_verify_email:
  url:  /the-essential-guide-verify/:hash
  class: cqPropelRoute
  param: { module: misc, action: guideVerifyEmail }
  options: { model: CollectorEmail, type: object }

### LEGACY

legacy_community_help:
  url:  /community/help
  param: { module: _legacy, action: help }

legacy_community_spotlight:
  url:   /community/spotlight
  param: { module: _legacy, action: spotlight }

legacy_community:
  url:   /community
  param: { module: _legacy, action: spotlight }

legacy_collectible_sell:
  url:  /collectible/sell
  param: { module: _legacy, action: spotlight }

legacy_featured_week:
  url:   /community/spotlight/:id/:slug
  class: sfPropelRoute
  options: { model: Featured, type: object, method: getObjectForFeaturedWeek }
  param: { module: _legacy, action: spotlight }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

legacy_15_minutes_of_fame:
  url:   /community/15-minutes-of-fame
  param: { module: _legacy, action: spotlight }

legacy_seller_signup:
  url:   /seller/signup/:step
  param: { module: _legacy, action: signup, step: 1 }
  requirements: { step: '[1-3]' }

legacy_seller_subscribe:
  url:   /seller/subscribe
  param: { module: _legacy, action: comingSoon }

legacy_collector_signup_facebook:
  url:   /collector/signup/facebook
  param: { module: collector, action: signup }

legacy_collections_most_recent:
  url:  /collections/filter/most-recent
  param: { module: _legacy, action: collectionsMostRecent }

legacy_collector_by_slug:
  url:  /collector/:slug
  class: sfPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute }
  param: { module: collector, action: index }
  requirements: { slug: '[\-\w\.]+' }


### DEFAULT

homepage:
  url:   /
  param: { module: general, action: index }

default_module:
  url:   /default/*
  param: { module: general, action: default }

default_index:
  url:   /:module
  param: { action: index }

default:
  url:   /:module/:action/*
