### AJAX

ajax_video_playlist_xml:
  url:   /ajax/video-playlist-xml/:id
  param: { module: ajax, action: videoPlaylistXml }

ajax_video_single_xml:
  url:   /ajax/video-single-xml/:id
  param: { module: ajax, action: singleVideoXml }

ajax_autocomplete:
  url:   /ajax/autocomplete/:section
  param: { module: ajax, action: autocomplete }

ajax_editable:
  url:   /ajax/editable
  param: { module: ajax, action: editable }

ajax_editable_load:
  url:   /ajax/editable-load
  param: { module: ajax, action: editableLoad }

ajax_collection:
  url:   /ajax/collection/:section/:page.:sf_format
  param: { module: ajax, action: collection, sf_format: html }
  options: { extra_parameters_as_query_string: true }
  requirements: { sf_format: (?:html|json) }

ajax_login:
  url:   /ajax/login
  param: { module: ajax, action: login }

ajax_signup_choice:
  url:   /ajax/signup-choice
  param: { module: ajax, action: signupChoice }

ajax_marketplace_listing:
  url:   /ajax/marketplace-listing/:page
  param: { module: cqAjax, action: marketplaceListing, page: 1 }
  requirements: { page: \d+ }

ajax_marketplace_listing_by_category:
  url:   /ajax/marketplace-listing-category/:category_id
  param: { module: cqAjax, action: marketplaceListing }
  requirements: { category_id: \d+ }

### SELLERS

seller_subscribe:
  url:   /seller/subscribe
  param: { module: general, action: comingSoon }

seller_become:
  url:   /seller/packages/:type
  param: { module: seller, action: packages, type: purchase }
  requirements: { id: '\d+' }

seller_upgrade_package:
  url:   /seller/packages/:type
  param: { module: seller, action: packages, type: upgrade }
  requirements: { id: '\d+' }

seller_ajax_save:
  url:   /seller/ajax/save
  param: { module: seller, action: ajaxSaveData }

seller_signup:
  url:   /collector/signup/:step
  param: { module: collector, action: signup, step: 1 }
  requirements: { step: '\d+' }

sellers:
  url:   /sellers
  param: { module: collectors, action: sellers }

### COLLECTORS

collector_signup_facebook:
  url:   /collector/signup/facebook
  param: { module: collector, action: signupFacebook }

collector_signup:
  url:   /collector/signup/:step
  param: { module: collector, action: signup, step: 1 }
  requirements: { step: '\d+' }

collector_auto_login:
  url:  /collector/auto-login/:hash
  param: { module: general, action: login }

collector_verify_email:
  url:  /collector/verify-email/:hash
  class: cqPropelRoute
  param: { module: general, action: verifyEmail }
  options: { model: CollectorEmail, type: object }

collector_by_slug:
  url:  /collector/:id/:slug
  class: cqPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute, statsd: true }
  param: { module: collector, action: index }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

collector_dropbox:
  url:  /collector/dropbox
  param: { module: collector, action: dropbox }

collector_me:
  url:  /collector/me
  class: sfPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute }
  param: { module: collector, action: me }

collector_by_slug_depreciated:
  url:  /collector/:slug
  class: sfPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute }
  param: { module: collector, action: index }
  requirements: { slug: '[\-\w\.]+' }

collectors_by_filter:
  url:   /collectors/filter/:filter
  param: { module: collectors, action: index }

collectors:
  url:   /collectors
  param: { module: collectors, action: index }

### COLLECTIONS

collection_create:
  url:   /collection/create
  param: { module: collection, action: create }

dropbox_by_slug:
  url:  /dropbox/:collector_id/:collector_slug
  class: sfPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute }
  param: { module: collection, action: index }
  requirements: { collector_id: '\d+', collector_slug: '[\-\w\.]+' }

collection_by_slug:
  url:  /collection/:id/:slug
  class: cqPropelRoute
  options: { model: CollectorCollection, type: object, method: getObjectForRoute, statsd: true }
  param: { module: collection, action: index }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

collections_by_filter:
  url:   /collections/filter/:filter
  param: { module: collections, action: index }

collections_by_tag:
  url:   /collections/tag/:tag
  param: { module: collections, action: index }

collections_by_collector:
  url:  /collections/by/:collector
  class: sfPropelRoute
  options: { model: Collector, type: object, method: getObjectForRoute }
  param: { module: collections, action: index }
  requirements: { collector: '[\-\w\.]+' }

collections:
  url:  /collections/filter/most-recent
  param: { module: collections, action: index }

collections_home:
  url:  /collections
  param: { module: collection, action: index }


### COLLECTIBLES

collectible_sell:
  url:  /collectible/sell
  param: { module: community, action: sellItem }

collectible_remove:
  url:  /collectible/:id/remove
  class: sfPropelRoute
  options: { model: Collectible, type: object }
  param: { module: collection, action: removeItem }
  requirements: { id: \d+ }

collectible_by_slug:
  url:  /collectible/:id/:slug
  class: cqPropelRoute
  options: { model: Collectible, type: object, method: getObjectForRoute, statsd: true }
  param: { module: collection, action: collectible }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }


### COMMUNITY

community_spotlight:
  url:   /community/spotlight
  param: { module: community, action: spotlight }

community:
  url:   /community
  param: { module: community, action: spotlight }


### VIDEOS

video_playlist:
  url: /videos/playlist/:id/:slug
  class: cqPropelRoute
  options: { model: Playlist, type: object, statsd: true }
  param: { module: videos, action: index }
  requirements: { id: \d+, slug: '[\-\w\.]+' }

video_by_id:
  url: /video/:id/:slug
  class: cqPropelRoute
  options: { model: Video, type: object, statsd: true }
  param: { module: videos, action: singleVideo, slug: view }
  requirements: { id: \d+, slug: '[\-\w\.]+' }

videos:
  url: /videos
  param: { module: videos, action: index }

event_by_id:
  url: /event/:id
  param: { module: videos, action: index }
  requirements: { id: \d+ }

events:
  url: /events
  param: { module: videos, action: index }


### SHOPPING

shopping_cart:
  url: /cart
  param: { module: shopping, action: cart }

shopping_order:
  url: /cart/order/:step
  param: { module: shopping, action: order, step: 1 }
  requirements: { step: '[1-3]' }


### MARKETPLACE

marketplace:
  url: /marketplace
  param: { module: marketplace, action: index }

marketplace_make_offer:
  url: /marketplace/make-offer/:id
  class: sfPropelRoute
  options: { model: CollectibleForSale, type: object }
  param: { module: marketplace, action: makeOffer }

marketplace_buy_now:
  url:  /marketplace/buy-now/:id
  class: sfPropelRoute
  options: { model: CollectibleForSale, type: object }
  param: { module: marketplace, action: buyNow }

marketplace_item_offers:
  url: /marketplace/:id/offers
  class: sfPropelRoute
  options: { model: CollectibleForSale, type: object }
  param: { module: marketplace, action: itemOffers }
  requirements: { id: \d+ }

marketplace_counter_offer:
  url: /marketplace/:id/counter-offer
  class: sfPropelRoute
  options: { model: CollectibleOffer, type: object }
  param: { module: marketplace, action: makeCounterOffer }
  requirements: { id: \d+ }

marketplace_item_offer:
  url: /marketplace/:id/offer/:cmd
  class: sfPropelRoute
  options: { model: CollectibleOffer, type: object }
  param: { module: marketplace, action: itemOffer }
  requirements: { id: \d+ }

marketplace_category_by_slug:
  url: /marketplace/category/:id/:slug
  class: sfPropelRoute
  options: { model: CollectionCategory, type: object, method: getObjectForRoute }
  param: { module: marketplace, action: index }
  requirements:
    id: \d+
    sf_method: [GET, POST]

### COMMENTS

comment_by_id:
  url:   /comment/:id
  class: sfPropelRoute
  options: { model: Comment, type: object }
  param: { module: comments, action: shortcut }
  requirements: { id: \d+ }

### TAGS

tag:
  url:   /tag/:tag
  param: { module: search, action: index }

tags:
  url:   /tags/:which
  param: { module: tags, action: tagCloud}
  requirements: { which: '[\-\w\.]+' }

tags_index:
  url:   /tags
  param: { module: tags, action: index }

### MESSAGES

messages_inbox:
  url:   /messages/inbox/:show
  param: { module: messages, action: inbox, show: all }

messages_sent:
  url:   /messages/sent
  param: { module: messages, action: sent }

message_show:
  url:   /message/:id/show
  param: { module: messages, action: show }

message_reply:
  url:   /message/:id/show#reply
  param: { module: messages, action: show }

message_compose:
  url:   /message/compose
  param: { module: messages, action: compose }

messages_batch_actions:
  url:   /messages/batch-actions
  param: { module: messages, action: batchActions }

### FEATURED WEEKS

featured_week:
  url:   /community/spotlight/:id/:slug
  class: sfPropelRoute
  options: { model: Featured, type: object, method: getObjectForFeaturedWeek }
  param: { module: community, action: spotlight }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

15_minutes_of_fame:
  url:   /community/15-minutes-of-fame
  param: { module: community, action: 15MinutesOfFame }

### MANAGE

manage_profile:
  url:   /manage/profile
  param: { module: manage, action: profile }

manage_preferences:
  url:   /manage/preferences
  param: { module: manage, action: preferences }

manage_dropbox:
  url:   /manage/dropbox
  param: { module: manage, action: dropbox }

manage_collections:
  url:   /manage/collections
  param: { module: manage, action: collections }

manage_collection_by_slug:
  url:  /manage/collection/:id/:slug
  class: sfPropelRoute
  options: { model: CollectorCollection, type: object, method: getObjectForRoute }
  param: { module: manage, action: collection }
  requirements: { id: '\d+', slug: '[\-\w\.]+', sf_method: [get, post] }

manage_collection:
  url:  /manage/collection
  param: { module: manage, action: collection }
  requirements: { sf_method: [get, post] }

manage_collectibles_dropbox:
  url:  /manage/collectibles/0/dropbox
  params: { module: manage, action: collectibles }

manage_collectibles_by_slug:
  url:  /manage/collectibles/:id/:slug
  class: sfPropelRoute
  options: { model: CollectorCollection, type: object, method: getObjectForRoute }
  params: { module: manage, action: collectibles }
  requirements:
    id: \d+
    slug: '[\-\w\.]+'
    sf_method: [get, post]

manage_collectibles:
  url:  /manage/collectibles
  params: { module: manage, action: collectibles }
  requirements: { sf_method: [get, post] }

manage_collectible_by_slug:
  url:  /manage/collectible/:id/:slug
  class: sfPropelRoute
  options: { model: Collectible, type: object, method: getObjectForRoute }
  param: { module: manage, action: collectible }
  requirements: { id: '\d+', slug: '[\-\w\.]+', sf_method: [get, post] }

manage_collectible:
  url:  /manage/collectible
  param: { module: manage, action: collectible }

manage_marketplace:
  url:   /manage/marketplace
  param: { module: manage, action: marketplace }

manage_friends:
  url:   /manage/friends
  param: { module: manage, action: friends }

### EXTERNAL

blog:
  url:  /blog/index.php

blog_latest_post:
  url:  /blog/index.php

blog_hot_topics:
  url:  /blog/index.php

calendar:
  url:  /calendar/index.php

calendar_this_week:
  url:  /calendar/index.php

calendar_hotlist:
  url:  /calendar/index.php?com=hotlist

### A&E

aent_landing:
  url: /history
  param: { module: aent, action: landing }
  requirements: { sf_method: [GET] }

aent_collectible_by_slug:
  url:  /aetn/collectible/:id/:slug
  class: cqPropelRoute
  options: { model: Collectible, type: object, method: getObjectForRoute }
  param: { module: aent, action: collectible }
  requirements: { id: '\d+', slug: '[\-\w\.]+' }

### GENERIC

emails:
  url: /emails
  options: { suffix: .html }
  param: { module: emails, action: index }
  requirements: { sf_method: [GET] }

page:
  url:   /blog/:slug

search_collectibles:
  url:   /search/collectibles
  param: { module: search, action: collectibles }

search_collections:
  url:   /search/collections
  param: { module: search, action: collections }

search_collectors:
  url:   /search/collectors
  param: { module: search, action: collectors }

search_blog:
  url:   /search/blog
  param: { module: search, action: blog }

search:
  url:   /search
  param: { module: search, action: index }

search_advanced:
  url:   /search-advanced
  param: { module: search, action: advanced }

login:
  url:   /login
  param: { module: general, action: login }

logout:
  url:   /logout
  param: { module: general, action: logout }

signup:
  url:   /signup
  param: { module: general, action: signup }

password:
  url:   /password
  param: { module: general, action: password }

rpx_token:
  url:   /rpx-token
  param: { module: general, action: RPXToken }

feedback:
  url:   /feedback
  param: { module: general, action: feedback }

homepage:
  url:   /
  param: { module: general, action: index }

### DEFAULT RULES

default_index:
  url:   /:module
  param: { action: index }

default:
  url:   /:module/:action/*
