<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['Flock_E_SelectOperationType'] = array(
  'SimpleQuery' => 1,
  'Intersection' => 2,
  'Union' => 3,
  'Difference' => 4,
);

final class Flock_SelectOperationType {
  const SimpleQuery = 1;
  const Intersection = 2;
  const Union = 3;
  const Difference = 4;
  static public $__names = array(
    1 => 'SimpleQuery',
    2 => 'Intersection',
    3 => 'Union',
    4 => 'Difference',
  );
}

$GLOBALS['Flock_E_ExecuteOperationType'] = array(
  'Add' => 1,
  'Remove' => 2,
  'Archive' => 3,
  'Negate' => 4,
);

final class Flock_ExecuteOperationType {
  const Add = 1;
  const Remove = 2;
  const Archive = 3;
  const Negate = 4;
  static public $__names = array(
    1 => 'Add',
    2 => 'Remove',
    3 => 'Archive',
    4 => 'Negate',
  );
}

$GLOBALS['Flock_E_EdgeState'] = array(
  'Positive' => 0,
  'Negative' => 3,
  'Removed' => 1,
  'Archived' => 2,
);

final class Flock_EdgeState {
  const Positive = 0;
  const Negative = 3;
  const Removed = 1;
  const Archived = 2;
  static public $__names = array(
    0 => 'Positive',
    3 => 'Negative',
    1 => 'Removed',
    2 => 'Archived',
  );
}

$GLOBALS['Flock_E_Priority'] = array(
  'Low' => 1,
  'Medium' => 2,
  'High' => 3,
);

final class Flock_Priority {
  const Low = 1;
  const Medium = 2;
  const High = 3;
  static public $__names = array(
    1 => 'Low',
    2 => 'Medium',
    3 => 'High',
  );
}

class Flock_FlockException extends TException {
  static $_TSPEC;

  public $description = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
    }
  }

  public function getName() {
    return 'FlockException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FlockException');
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 1);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_Results {
  static $_TSPEC;

  public $ids = null;
  public $next_cursor = null;
  public $prev_cursor = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'next_cursor',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'prev_cursor',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ids'])) {
        $this->ids = $vals['ids'];
      }
      if (isset($vals['next_cursor'])) {
        $this->next_cursor = $vals['next_cursor'];
      }
      if (isset($vals['prev_cursor'])) {
        $this->prev_cursor = $vals['prev_cursor'];
      }
    }
  }

  public function getName() {
    return 'Results';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->next_cursor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->prev_cursor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Results');
    if ($this->ids !== null) {
      $xfer += $output->writeFieldBegin('ids', TType::STRING, 1);
      $xfer += $output->writeString($this->ids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->next_cursor !== null) {
      $xfer += $output->writeFieldBegin('next_cursor', TType::I64, 2);
      $xfer += $output->writeI64($this->next_cursor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prev_cursor !== null) {
      $xfer += $output->writeFieldBegin('prev_cursor', TType::I64, 3);
      $xfer += $output->writeI64($this->prev_cursor);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_Page {
  static $_TSPEC;

  public $count = null;
  public $cursor = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cursor',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['cursor'])) {
        $this->cursor = $vals['cursor'];
      }
    }
  }

  public function getName() {
    return 'Page';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cursor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Page');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cursor !== null) {
      $xfer += $output->writeFieldBegin('cursor', TType::I64, 2);
      $xfer += $output->writeI64($this->cursor);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_Edge {
  static $_TSPEC;

  public $source_id = null;
  public $destination_id = null;
  public $position = null;
  public $updated_at = null;
  public $count = null;
  public $state_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'source_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'destination_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'position',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'state_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['source_id'])) {
        $this->source_id = $vals['source_id'];
      }
      if (isset($vals['destination_id'])) {
        $this->destination_id = $vals['destination_id'];
      }
      if (isset($vals['position'])) {
        $this->position = $vals['position'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['state_id'])) {
        $this->state_id = $vals['state_id'];
      }
    }
  }

  public function getName() {
    return 'Edge';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->source_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->destination_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Edge');
    if ($this->source_id !== null) {
      $xfer += $output->writeFieldBegin('source_id', TType::I64, 1);
      $xfer += $output->writeI64($this->source_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination_id !== null) {
      $xfer += $output->writeFieldBegin('destination_id', TType::I64, 2);
      $xfer += $output->writeI64($this->destination_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position !== null) {
      $xfer += $output->writeFieldBegin('position', TType::I64, 3);
      $xfer += $output->writeI64($this->position);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 4);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 5);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state_id !== null) {
      $xfer += $output->writeFieldBegin('state_id', TType::I32, 6);
      $xfer += $output->writeI32($this->state_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_Metadata {
  static $_TSPEC;

  public $source_id = null;
  public $state_id = null;
  public $count = null;
  public $updated_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'source_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'state_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['source_id'])) {
        $this->source_id = $vals['source_id'];
      }
      if (isset($vals['state_id'])) {
        $this->state_id = $vals['state_id'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
    }
  }

  public function getName() {
    return 'Metadata';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->source_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Metadata');
    if ($this->source_id !== null) {
      $xfer += $output->writeFieldBegin('source_id', TType::I64, 1);
      $xfer += $output->writeI64($this->source_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state_id !== null) {
      $xfer += $output->writeFieldBegin('state_id', TType::I32, 2);
      $xfer += $output->writeI32($this->state_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 3);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 4);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_QueryTerm {
  static $_TSPEC;

  public $source_id = null;
  public $graph_id = null;
  public $is_forward = null;
  public $destination_ids = null;
  public $state_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'source_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'graph_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'is_forward',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'destination_ids',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'state_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['source_id'])) {
        $this->source_id = $vals['source_id'];
      }
      if (isset($vals['graph_id'])) {
        $this->graph_id = $vals['graph_id'];
      }
      if (isset($vals['is_forward'])) {
        $this->is_forward = $vals['is_forward'];
      }
      if (isset($vals['destination_ids'])) {
        $this->destination_ids = $vals['destination_ids'];
      }
      if (isset($vals['state_ids'])) {
        $this->state_ids = $vals['state_ids'];
      }
    }
  }

  public function getName() {
    return 'QueryTerm';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->source_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->graph_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_forward);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destination_ids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->state_ids = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->state_ids []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryTerm');
    if ($this->source_id !== null) {
      $xfer += $output->writeFieldBegin('source_id', TType::I64, 1);
      $xfer += $output->writeI64($this->source_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->graph_id !== null) {
      $xfer += $output->writeFieldBegin('graph_id', TType::I32, 2);
      $xfer += $output->writeI32($this->graph_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_forward !== null) {
      $xfer += $output->writeFieldBegin('is_forward', TType::BOOL, 3);
      $xfer += $output->writeBool($this->is_forward);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination_ids !== null) {
      $xfer += $output->writeFieldBegin('destination_ids', TType::STRING, 4);
      $xfer += $output->writeString($this->destination_ids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state_ids !== null) {
      if (!is_array($this->state_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('state_ids', TType::LST, 5);
      {
        $output->writeListBegin(TType::I32, count($this->state_ids));
        {
          foreach ($this->state_ids as $iter6)
          {
            $xfer += $output->writeI32($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_SelectOperation {
  static $_TSPEC;

  public $operation_type = null;
  public $term = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operation_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'term',
          'type' => TType::STRUCT,
          'class' => 'Flock_QueryTerm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operation_type'])) {
        $this->operation_type = $vals['operation_type'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
    }
  }

  public function getName() {
    return 'SelectOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operation_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->term = new Flock_QueryTerm();
            $xfer += $this->term->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SelectOperation');
    if ($this->operation_type !== null) {
      $xfer += $output->writeFieldBegin('operation_type', TType::I32, 1);
      $xfer += $output->writeI32($this->operation_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      if (!is_object($this->term)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('term', TType::STRUCT, 2);
      $xfer += $this->term->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_ExecuteOperation {
  static $_TSPEC;

  public $operation_type = null;
  public $term = null;
  public $position = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operation_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'term',
          'type' => TType::STRUCT,
          'class' => 'Flock_QueryTerm',
          ),
        3 => array(
          'var' => 'position',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operation_type'])) {
        $this->operation_type = $vals['operation_type'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['position'])) {
        $this->position = $vals['position'];
      }
    }
  }

  public function getName() {
    return 'ExecuteOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operation_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->term = new Flock_QueryTerm();
            $xfer += $this->term->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExecuteOperation');
    if ($this->operation_type !== null) {
      $xfer += $output->writeFieldBegin('operation_type', TType::I32, 1);
      $xfer += $output->writeI32($this->operation_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      if (!is_object($this->term)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('term', TType::STRUCT, 2);
      $xfer += $this->term->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position !== null) {
      $xfer += $output->writeFieldBegin('position', TType::I64, 3);
      $xfer += $output->writeI64($this->position);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_ExecuteOperations {
  static $_TSPEC;

  public $operations = null;
  public $execute_at = null;
  public $priority = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operations',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Flock_ExecuteOperation',
            ),
          ),
        2 => array(
          'var' => 'execute_at',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'priority',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operations'])) {
        $this->operations = $vals['operations'];
      }
      if (isset($vals['execute_at'])) {
        $this->execute_at = $vals['execute_at'];
      }
      if (isset($vals['priority'])) {
        $this->priority = $vals['priority'];
      }
    }
  }

  public function getName() {
    return 'ExecuteOperations';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->operations = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new Flock_ExecuteOperation();
              $xfer += $elem12->read($input);
              $this->operations []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->execute_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExecuteOperations');
    if ($this->operations !== null) {
      if (!is_array($this->operations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operations', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->operations));
        {
          foreach ($this->operations as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execute_at !== null) {
      $xfer += $output->writeFieldBegin('execute_at', TType::I32, 2);
      $xfer += $output->writeI32($this->execute_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority !== null) {
      $xfer += $output->writeFieldBegin('priority', TType::I32, 3);
      $xfer += $output->writeI32($this->priority);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_SelectQuery {
  static $_TSPEC;

  public $operations = null;
  public $page = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operations',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Flock_SelectOperation',
            ),
          ),
        2 => array(
          'var' => 'page',
          'type' => TType::STRUCT,
          'class' => 'Flock_Page',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operations'])) {
        $this->operations = $vals['operations'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
    }
  }

  public function getName() {
    return 'SelectQuery';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->operations = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new Flock_SelectOperation();
              $xfer += $elem19->read($input);
              $this->operations []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->page = new Flock_Page();
            $xfer += $this->page->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SelectQuery');
    if ($this->operations !== null) {
      if (!is_array($this->operations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operations', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->operations));
        {
          foreach ($this->operations as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      if (!is_object($this->page)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('page', TType::STRUCT, 2);
      $xfer += $this->page->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_EdgeQuery {
  static $_TSPEC;

  public $term = null;
  public $page = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'term',
          'type' => TType::STRUCT,
          'class' => 'Flock_QueryTerm',
          ),
        2 => array(
          'var' => 'page',
          'type' => TType::STRUCT,
          'class' => 'Flock_Page',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
    }
  }

  public function getName() {
    return 'EdgeQuery';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->term = new Flock_QueryTerm();
            $xfer += $this->term->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->page = new Flock_Page();
            $xfer += $this->page->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EdgeQuery');
    if ($this->term !== null) {
      if (!is_object($this->term)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('term', TType::STRUCT, 1);
      $xfer += $this->term->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      if (!is_object($this->page)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('page', TType::STRUCT, 2);
      $xfer += $this->page->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Flock_EdgeResults {
  static $_TSPEC;

  public $edges = null;
  public $next_cursor = null;
  public $prev_cursor = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'edges',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Flock_Edge',
            ),
          ),
        2 => array(
          'var' => 'next_cursor',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'prev_cursor',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['edges'])) {
        $this->edges = $vals['edges'];
      }
      if (isset($vals['next_cursor'])) {
        $this->next_cursor = $vals['next_cursor'];
      }
      if (isset($vals['prev_cursor'])) {
        $this->prev_cursor = $vals['prev_cursor'];
      }
    }
  }

  public function getName() {
    return 'EdgeResults';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->edges = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new Flock_Edge();
              $xfer += $elem26->read($input);
              $this->edges []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->next_cursor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->prev_cursor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EdgeResults');
    if ($this->edges !== null) {
      if (!is_array($this->edges)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('edges', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->edges));
        {
          foreach ($this->edges as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->next_cursor !== null) {
      $xfer += $output->writeFieldBegin('next_cursor', TType::I64, 2);
      $xfer += $output->writeI64($this->next_cursor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prev_cursor !== null) {
      $xfer += $output->writeFieldBegin('prev_cursor', TType::I64, 3);
      $xfer += $output->writeI64($this->prev_cursor);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
