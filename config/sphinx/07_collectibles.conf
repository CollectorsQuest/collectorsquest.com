### Collectibles Index

source prod_collectibles : prod_website
{
  sql_query  = SELECT collectible.*, GROUP_CONCAT(tag.name SEPARATOR ', ') AS tags, \
                      IF(cs.IS_READY=1 AND cs.PRICE_AMOUNT>=1 AND cs.QUANTITY>=1, 1, 0) AS is_for_sale \
                 FROM collectible \
                 LEFT JOIN collectible_for_sale cs ON (cs.collectible_id = collectible.id) \
                 LEFT JOIN tagging ON (tagging.taggable_id = collectible.id AND tagging.taggable_model = 'Collectible') \
                 LEFT JOIN tag ON (tag.id = tagging.tag_id) \
                WHERE collectible.collector_id NOT IN (6667, 6668) \
                GROUP BY collectible.id

  sql_attr_uint  = collector_id
  sql_attr_uint  = is_for_sale
  sql_attr_uint  = score

  sql_attr_timestamp  = updated_at
  sql_attr_timestamp  = created_at
}

source dev_collectibles : dev_website
{
  sql_query  = SELECT collectible.*, GROUP_CONCAT(tag.name SEPARATOR ', ') AS tags, \
                      IF(cs.IS_READY=1 AND cs.PRICE_AMOUNT>=1 AND cs.QUANTITY>=1, 1, 0) AS is_for_sale \
                 FROM collectible \
                 LEFT JOIN collectible_for_sale cs ON (cs.collectible_id = collectible.id) \
                 LEFT JOIN tagging ON (tagging.taggable_id = collectible.id AND tagging.taggable_model = 'Collectible') \
                 LEFT JOIN tag ON (tag.id = tagging.tag_id) \
                WHERE collectible.collector_id NOT IN (6667, 6668) \
                GROUP BY collectible.id

  sql_attr_uint  = collector_id
  sql_attr_uint  = is_for_sale
  sql_attr_uint  = score

  sql_attr_timestamp  = updated_at
  sql_attr_timestamp  = created_at
}

source dev_collectibles_normalized : dev_website
{
  sql_query  = SELECT (c.ID + 400000000) AS ID, c.ID AS object_id, 'collectible' AS object_type, \
                      c.name AS title, c.description AS content, c.num_views AS score, \
                      GROUP_CONCAT(tag.name SEPARATOR ', ') AS tags, \
                      IF(cs.IS_READY=1 AND cs.PRICE_AMOUNT>=1 AND cs.QUANTITY>=1, 1, 0) AS uint1, \
                      cs.PRICE_AMOUNT AS uint2, 0 AS uint3, 0 AS uint4, 0 AS uint5, \
                      UNIX_TIMESTAMP(c.updated_at) AS updated_at, UNIX_TIMESTAMP(c.created_at) AS created_at \
                 FROM collectible AS c \
                 LEFT JOIN collectible_for_sale cs ON (cs.collectible_id = c.id) \
                 LEFT JOIN tagging ON (tagging.taggable_id = c.id AND tagging.taggable_model = 'Collectible') \
                 LEFT JOIN tag ON (tag.id = tagging.tag_id) \
                GROUP BY c.ID

  sql_attr_uint   = object_id
  sql_attr_string = object_type
  sql_attr_uint   = uint1
  sql_attr_uint   = uint2
  sql_attr_uint   = uint3
  sql_attr_uint   = uint4
  sql_attr_uint   = uint5
  sql_attr_uint   = score

  sql_attr_timestamp  = updated_at
  sql_attr_timestamp  = created_at
}

source next_collectibles_normalized : next_website
{
  sql_query  = SELECT (c.ID + 400000000) AS ID, c.ID AS object_id, 'collectible' AS object_type, \
                      c.name AS title, c.description AS content, c.num_views AS score, \
                      GROUP_CONCAT(tag.name SEPARATOR ', ') AS tags, \
                      IF(cs.IS_READY=1 AND cs.PRICE_AMOUNT>=1 AND cs.QUANTITY>=1, 1, 0) AS uint1, \
                      cs.PRICE_AMOUNT AS uint2, 0 AS uint3, 0 AS uint4, 0 AS uint5, \
                      UNIX_TIMESTAMP(c.updated_at) AS updated_at, UNIX_TIMESTAMP(c.created_at) AS created_at \
                 FROM collectible AS c \
                 LEFT JOIN collectible_for_sale cs ON (cs.collectible_id = c.id) \
                 LEFT JOIN tagging ON (tagging.taggable_id = c.id AND tagging.taggable_model = 'Collectible') \
                 LEFT JOIN tag ON (tag.id = tagging.tag_id) \
                GROUP BY c.ID

  sql_attr_uint   = object_id
  sql_attr_string = object_type
  sql_attr_uint   = uint1
  sql_attr_uint   = uint2
  sql_attr_uint   = uint3
  sql_attr_uint   = uint4
  sql_attr_uint   = uint5
  sql_attr_uint   = score

  sql_attr_timestamp  = updated_at
  sql_attr_timestamp  = created_at
}

source prod_collectibles_normalized : next_website
{
  sql_query  = SELECT (c.ID + 400000000) AS ID, c.ID AS object_id, 'collectible' AS object_type, \
                      c.name AS title, c.description AS content, c.num_views AS score, \
                      GROUP_CONCAT(tag.name SEPARATOR ', ') AS tags, \
                      IF(cs.IS_READY=1 AND cs.PRICE_AMOUNT>=1 AND cs.QUANTITY>=1, 1, 0) AS uint1, \
                      cs.PRICE_AMOUNT AS uint2, 0 AS uint3, 0 AS uint4, 0 AS uint5, \
                      UNIX_TIMESTAMP(c.updated_at) AS updated_at, UNIX_TIMESTAMP(c.created_at) AS created_at \
                 FROM collectible AS c \
                 LEFT JOIN collectible_for_sale cs ON (cs.collectible_id = c.id) \
                 LEFT JOIN tagging ON (tagging.taggable_id = c.id AND tagging.taggable_model = 'Collectible') \
                 LEFT JOIN tag ON (tag.id = tagging.tag_id) \
                GROUP BY c.ID

  sql_attr_uint   = object_id
  sql_attr_string = object_type
  sql_attr_uint   = uint1
  sql_attr_uint   = uint2
  sql_attr_uint   = uint3
  sql_attr_uint   = uint4
  sql_attr_uint   = uint5
  sql_attr_uint   = score

  sql_attr_timestamp  = updated_at
  sql_attr_timestamp  = created_at
}

index prod_collectibles : prod_website
{
  source  = prod_collectibles
  path    = /var/lib/sphinx/website/collectibles
}

index dev_collectibles : dev_website
{
  source  = dev_collectibles
  path    = /var/lib/sphinx/website/collectibles
}

index dev_collectibles_normalized : dev_website
{
  source  = dev_collectibles_normalized
  path    = /var/lib/sphinx/website/collectibles_normalized/dev
}

index next_collectibles_normalized : next_website
{
  source  = next_collectibles_normalized
  path    = /var/lib/sphinx/website/collectibles_normalized/next
}
