connection: propel
noXsd: false
defaultIdMethod: native
package: lib.model

classes:

  ###
  # NOTE: Make SURE to update also CollectorArchive in archive.schema.yml
  ##
  Collector:
    columns:
      id:  ~
      graph_id:       { type: integer, required: false, index: unique }
      facebook_id:    { type: varchar, size: 20, index: unique }
      username:       { type: varchar, size: 64, required: true, index: unique }
      display_name:   { type: varchar, size: 64, required: true, primaryString: true, index: unique }
      slug:           { type: varchar, size: 64, required: true, index: unique }
      sha1_password:  { type: varchar, size: 40, required: true }
      portable_password:  { type: varchar, size: 64, required: true }
      salt:           { type: varchar, size: 32, required: true }
      email:          { type: varchar, size: 128, index: unique }
      user_type:      { type: char, sqlType: "ENUM('Collector','Seller')", default: "Collector", required: true }
      locale:         { type: varchar, size: 5, default: "en_US" }
      score:          { type: integer, default: 0 }
      spam_score:     { type: integer, default: 0 }
      is_spam:        { type: boolean, default: false }
      is_public:      { type: boolean, default: true }
      has_completed_registration: { type: boolean, default: false }
      session_id:     { type: varchar, size: 32 }
      cookie_uuid:    { type: varchar, size: 32, index: unique }
      last_seen_at:   { type: timestamp }
      last_visited_at: { type: timestamp }

      eblob: { type: longvarchar, default: null }

    propel_behaviors:
      archivable: { archive_class: CollectorArchive, archived_at_column: archived_at }
      sluggable: { slug_pattern: "{DisplayName}", permanent: false }
      ratable: { max_rate: 5, user_table: sf_guard_user, dimensions: "Content, Image(s)" }
      extra_properties: ~
      timestampable:  ~

  ###
  # NOTE: Make SURE to update also CollectorProfileArchive in archive.schema.yml
  ##
  CollectorProfile:
    columns:
      collector_id:    { type: integer, primaryKey: true, foreignClass: Collector, foreignReference: id, required: true, onDelete: cascade }
      collector_type:  { type: enum, valueSet: "casual, occasional, serious, obsessive, expert", default: casual, required: true }
      birthday:        { type: date }
      gender:          { type: char, sqlType: "ENUM('f','m')" }
      zip_postal:      varchar(10)
      country_iso3166: { type: char, size: 2, required: false, foreignTable: geo_country, foreignReference: iso3166 }
      website:         varchar(128)
      num_views:       { type: integer, default: 0 }
      is_featured:     { type: boolean, default: false }
      is_seller:       { type: boolean, default: false }
      is_image_auto:   { type: boolean, default: true }

    propel_behaviors:
      archivable: { archive_class: CollectorProfileArchive, archived_at_column: archived_at }
      extra_properties: ~
      timestampable:  ~
      simple_calculations: { columns: [num_views] }

  CollectorEmail:
    columns:
      id:  ~
      collector_id:  { type: integer, foreignClass: Collector, foreignReference: id, required: true, onDelete: cascade }
      email:         { type: varchar, size: 128, index: true }
      hash:          { type: varchar, size: 128, required: true }
      salt:          { type: varchar, size: 32, required: true }
      is_verified:   { type: boolean, default: false }

    uniques:
      unq_collector_email: [collector_id, email]

    propel_behaviors:
      symfony:        { form: false, filter: false }
      timestampable:  ~

  CollectorAddress:
    columns:
      id:               ~
      collector_id:     { type: integer, foreignClass: Collector, foreignReference: id, required: true, onDelete: cascade }
      full_name:        { type: varchar(255), required: true  }
      address_line_1:   { type: varchar(255), required: true  }
      address_line_2:   { type: varchar(255), required: false }
      city:             { type: varchar(100), required: true  }
      state_region:     { type: varchar(100), required: false }
      zip_postcode:     { type: varchar(50),  required: false }
      country_iso3166:  { type: char, size: 2, required: true, foreignTable: geo_country, foreignReference: iso3166 }
      phone:            { type: varchar(50),  required: true  }
      is_primary:       { type: boolean, required: true, default: false }

  ###
  # NOTE: Make SURE to update also CollectorIdentifierArchive in archive.schema.yml
  ##
  CollectorIdentifier:
    columns:
      id:  ~
      collector_id:  { type: integer, foreignClass: Collector, foreignReference: id, required: true, onDelete: cascade }
      identifier:    { type: varchar, size: 255, index: unique }
      created_at:    ~

    propel_behaviors:
      archivable:    { archive_class: CollectorIdentifierArchive, archived_at_column: archived_at }
      symfony:       { form: false, filter: false }

  CollectorRememberKey:
    columns:
      id: ~
      collector_id:  { type: integer, foreignClass: Collector, foreignReference: id, required: true, onDelete: cascade }
      remember_key:  { type: char, size: 32 }
      ip_address:    { type: char, size: 15 }
      created_at:    ~

    propel_behaviors:
      symfony:       { form: false, filter: false }


  ###
  # NOTE: Make SURE to update also CollectorGeocacheArchive in archive.schema.yml
  ##
  CollectorGeocache:
    columns:
      id:  ~
      collector_id:     { type: integer, foreignClass: Collector, foreignReference: id, required: true, onDelete: cascade }
      country_iso3166:  { type: char, size: 2, required: false, foreignTable: geo_country, foreignReference: iso3166 }
      state:            { type: varchar, size: 64 }
      county:           { type: varchar, size: 64 }
      city:             { type: varchar, size: 64 }
      zip_postal:       { type: char, size: 10 }
      address:          { type: varchar, size: 128 }
      latitude:         { type: float, sqlType: "DECIMAL(8,5)" }
      longitude:        { type: float, sqlType: "DECIMAL(8,5)" }
      timezone:         { type: varchar, size: 128 }

    propel_behaviors:
      archivable:  { archive_class: CollectorGeocacheArchive, log_archived_at: false }
      symfony:     { form: false, filter: false }

  CollectorFriend:
    columns:
      id:  ~
      collector_id:  { type: integer, required: true, foreignClass: Collector, foreignReference: id }
      friend_id:     { type: integer, required: true, foreignClass: Collector, foreignReference: id }
      created_at:    ~

  ###
  # NOTE: Make SURE to update also CollectionArchive in archive.schema.yml
  ##
  Collection:
    columns:
      id:  ~
      graph_id:                { type: integer, required: false, index: unique }
      collection_category_id:  { type: integer, required: false }
      content_category_id:     { type: integer, foreignClass: ContentCategory, foreignReference: id, onDelete: setnull, required: false }
      name:                    { type: varchar, size: 255, required: true, primaryString: true }
      slug:                    { type: varchar, size: 128 }
      description:             { type: longvarchar, required: true }
      num_items:               { type: integer, default: 0 }
      num_public_items:        { type: integer, default: 0 }
      num_views:               { type: integer, default: 0 }
      num_comments:            { type: integer, default: 0 }
      num_ratings:             { type: integer, default: 0 }
      score:                   { type: integer, default: 0 }
      is_public:               { type: boolean, default: true }
      is_featured:             { type: boolean, default: false }
      comments_on:             { type: boolean, default: true }
      rating_on:               { type: boolean, default: true }

      eblob: { type: longvarchar, default: null }

    propel_behaviors:
      sluggable: { slug_pattern: "{Name}", permanent: false }
      ratable: { max_rate: 5, user_table: sf_guard_user, dimensions: "Content, Image(s)" }
      simple_calculations: { columns: [num_views] }
      timestampable:  ~

  ContentCategory:
    columns:
      id: ~
      collection_category_id: { type: integer, required: false }
      name:          { type: varchar, size: 64, required: true, primaryString: true }
      name_singular: { type: varchar, size: 64, required: false }
      slug:          { type: varchar, size: 64, required: true }
      description:   { type: longvarchar, required: false }
    propel_behaviors:
      sluggable:  { slug_pattern: "{Name}", permanent: false }
      extra_properties: ~
      nested_set: ~
      aggregate_column:
        name: num_collectibles_for_sale
        foreign_table: collectible

  CollectionCollectible:
    isCrossRef: true
    columns:
      collection_id:   { type: integer, required: true, foreignClass: Collection, foreignReference: id, onDelete: cascade, primaryKey: true }
      collectible_id:  { type: integer, required: true, foreignClass: Collectible, foreignReference: id, onDelete: cascade, primaryKey: true }
      score:           { type: integer, default: 0 }
      position:        { type: integer, default: 0 }
      is_primary:      { type: boolean, default: false }

    propel_behaviors:
      timestampable:  ~

  CollectorCollection:
    columns:
      collector_id:     { type: integer, required: true, foreignClass: Collector, foreignReference: id, onDelete: cascade }

    foreignKeys:
      collection_collectible:
        foreignClass: CollectionCollectible
        skipSQL: true
        references:
          - { local: id, foreign: collection_id }

    propel_behaviors:
      concrete_inheritance: { extends: collection, copy_data_to_parent: true }
      archivable: { archive_class: CollectorCollectionArchive, archived_at_column: archived_at }

  ###
  # NOTE: Make SURE to update also CollectibleArchive in archive.schema.yml
  ##
  Collectible:
    columns:
      id:  ~
      graph_id:          { type: integer, required: false, index: unique }
      collector_id:      { type: integer, foreignClass: Collector, foreignReference: id, required: true, onDelete: cascade }
      content_category_id: { type: integer, foreignClass: ContentCategory, foreignReference: id, required: false, onDelete: setnull }
      name:              { type: varchar, size: 255, required: true, primaryString: true }
      slug:              { type: varchar, size: 128, index: unique }
      description:       { type: longvarchar, required: true }
      batch_hash:        { type: varchar, size: 32, index: true }
      num_views:         { type: integer, default: 0 }
      num_comments:      { type: integer, default: 0 }
      score:             { type: integer, default: 0 }
      is_name_automatic: { type: boolean, default: false }
      is_public:         { type: boolean, default: true }

      eblob:             { type: longvarchar, default: null }

    propel_behaviors:
      archivable: { archive_class: CollectibleArchive, archived_at_column: archived_at }
      ratable: { max_rate: 5, user_table: sf_guard_user, dimensions: "Content, Image(s)" }
      simple_calculations: { columns: [num_views] }
      timestampable:  ~

  PrivateMessage:
    columns:
      id:  ~
      thread:        { type: varchar, size: 32 }
      sender:        { type: integer, required: true, foreignClass: Collector, foreignReference: id, fkSkipSql: true }
      receiver:      { type: integer, required: true, foreignClass: Collector, foreignReference: id, fkSkipSql: true }
      subject:       { type: varchar, size: 255, required: true }
      body:          { type: longvarchar, required: true }
      is_rich:       { type: boolean, default: false }
      is_read:       { type: boolean, default: false }
      is_replied:    { type: boolean, default: false }
      is_forwarded:  { type: boolean, default: false }
      is_marked:     { type: boolean, default: false }
      is_deleted:    { type: boolean, default: false }
      is_spam:       { type: boolean, default: false }
      created_at:    ~

    indexes:
      private_message_I_1: [thread]
      private_message_I_2: [receiver, sender]

    propel_behaviors:
      extra_properties: ~

  PrivateMessageExtraProperty:
    columns:
      id:             ~
      property_name:  { type: varchar(255), required: true }
      property_value: { type: longvarchar }
    propel_behaviors:
      symfony:        { form: false, filter: false }


  PrivateMessageTemplate:
    columns:
      id:  ~
      subject:      { type: varchar, size: 255, required: true }
      body:         { type: longvarchar, required: true }
      description:  { type: varchar, size: 255 }

    propel_behaviors:
      timestampable:  ~

  ###
  # NOTE: Make SURE to update also CommentArchive in archive.schema.yml
  ##
  Comment:
    columns:
      id:  ~
      disqus_id:       { type: char, size: 10 }
      parent_id:       { type: char, size: 10 }
      collection_id:   { type: integer, foreignClass: Collection,  foreignReference: id, required: false, onDelete: cascade }
      collectible_id:  { type: integer, foreignClass: Collectible, foreignReference: id, required: false, onDelete: cascade }
      collector_id:    { type: integer, foreignClass: Collector,   foreignReference: id, required: false, onDelete: cascade }
      model:           { type: char, size: 64, required: false }
      model_id:        { type: integer,      required: false }
      author_name:     { type: varchar(128), required: false }
      author_email:    { type: varchar(128), required: false }
      author_url:      { type: varchar(255), required: false }
      is_notify:       { type: boolean,      required: true, default: false }
      is_hidden:       { type: boolean,      required: true, dafault: false }
      is_spam:         { type: boolean,      required: true, dafault: false }
      subject:         { type: varchar(128), required: false }
      body:            { type: longvarchar,  required: true  }
      ip_address:      { type: varchar(15),  required: false }
      created_at:  ~

    indexes:
      comment_model_object: [model, model_id]
    uniques:
      comment_U_1:  [disqus_id]

    propel_behaviors:
      archivable: { archive_class: CommentArchive, archived_at_column: archived_at }

  Term:
    columns:
      id:  ~
      name:  { type: varchar, size: 100, primaryString: true }

  TermRelationship:
    columns:
      id:  ~
      term_id:   ~
      model:     { type: varchar, size: 30, index: true }
      model_id:  { type: integer }

  Score:
    columns:
      id:  ~
      day:         { type: date }
      model:       { type: char, size: 64, required: true }
      model_id:    { type: integer }
      views:       { type: integer, default: 0 }
      ratings:     { type: integer, default: 0 }
      score:       { type: integer, default: 0 }

    uniques:
      score_U_1:  [day, model, model_id]

    propel_behaviors:
      timestampable:  ~
