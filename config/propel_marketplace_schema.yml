connection: propel
noXsd: false
defaultIdMethod: native
package: lib.model.marketplace

classes:

  ###
  # NOTE: Make SURE to update also CollectibleForSaleArchive in archive.schema.yml
  ##
  CollectibleForSale:
    columns:
      collectible_id:       { type: integer, primaryKey: true, required: true, foreignClass: Collectible, foreignReference: id, onDelete: cascade }
      price_amount:         { type: integer, required: true, default: 0 }
      price_currency:       { type: char, size: 3, required: true, default: 'USD' }
      tax_country:          { type: char, size: 2, required: false, foreignTable: geo_country, foreignReference: iso3166 }
      tax_state:            { type: integer, required: false, , foreignTable: geo_region, foreignReference: id }
      tax_percentage:       { type: integer, required: false }
      condition:            { type: char, sqlType: "ENUM('excellent','very good','good','fair','poor')", required: true }
      is_price_negotiable:  { type: boolean, default: false }
      is_shipping_free:     { type: boolean, default: false }
      is_ready:             { type: boolean, default: false, description: 'Show in the market or not' }
      marked_for_sale_at:   { type: timestamp }
      is_sold:              { type: boolean, default: false }
      quantity:             { type: integer, required: true, default: 1 }

    propel_behaviors:
      archivable: { archive_class: CollectibleForSaleArchive, archived_at_column: archived_at }
      timestampable:  ~


  ShoppingCart:
    columns:
      id:  ~
      collector_id:      { type: integer, required: false, foreignClass: Collector, foreignReference: id, onDelete: setnull }
      cookie_uuid:       { type: varchar, size: 32, required: false }

    uniques:
      shopping_cart_U_1: [ collector_id ]
      shopping_cart_U_2: [ collector_id, cookie_uuid ]

    propel_behaviors:
      timestampable:  ~

  ShoppingCartCollectible:
    isCrossRef: true
    columns:
      shopping_cart_id:          { type: integer, required: true, foreignClass: ShoppingCart, foreignReference: id, onDelete: cascade, primaryKey: true }
      collectible_id:            { type: integer, required: true, foreignClass: Collectible, foreignReference: id, onDelete: cascade, primaryKey: true }
      price_amount:              { type: integer, required: true, default: 0 }
      price_currency:            { type: char, size: 3, required: true, default: 'USD' }
      tax_amount:                { type: integer, required: true, default: 0 }
      shipping_country_iso3166:  { type: char, size: 2, required: true, foreignTable: geo_country, foreignReference: iso3166 }
      shipping_state_region:     { type: integer, required: false }
      shipping_fee_amount:       { type: integer, required: false }
      # should always mirror shipping_reference.shipping_type
      shipping_type:             { type: enum,    required: false, valueSet: "no_shipping, local_pickup_only, flat_rate, calculated_shipping" }
      is_active:                 { type: boolean, default: true }

    propel_behaviors:
      timestampable:  ~

  ShoppingOrder:
    columns:
      id:  ~
      uuid:                 { type: varchar, size: 8 }
      seller_id:            { type: integer, required: false, foreignClass: Collector, foreignReference: id, onDelete: setnull }
      collector_id:         { type: integer, required: false, foreignClass: Collector, foreignReference: id, onDelete: setnull }
      shopping_cart_id:     { type: integer, required: true, foreignClass: ShoppingCart, foreignReference: id, onDelete: restrict }
      collectible_id:       { type: integer, required: true, foreignClass: Collectible, foreignReference: id, onDelete: restrict }
      shopping_payment_id:  { type: integer, required: false, foreignClass: ShoppingPayment, foreignReference: id, onDelete: setnull }
      buyer_email:          { type: varchar, size: 128, index: true }

      shipping_address_id:       { type: integer, required: false, foreignClass: CollectorAddress, foreignReference: id, onDelete: setnull }
      shipping_full_name:        { type: varchar(255), required: true  }
      shipping_phone:            { type: varchar(50),  required: false }
      shipping_address_line_1:   { type: varchar(255), required: true  }
      shipping_address_line_2:   { type: varchar(255), required: false }
      shipping_city:             { type: varchar(100), required: true  }
      shipping_state_region:     { type: varchar(100), required: false }
      shipping_zip_postcode:     { type: varchar(50),  required: true }
      shipping_country_iso3166:  { type: char, size: 2, required: false, foreignTable: geo_country, foreignReference: iso3166 }

      shipping_carrier:          { type: enum, required: false, valueSet: "FedEx, UPS, USPS, DHL" }
      shipping_tracking_number:  { type: varchar(64), required: false }

      note_to_seller:       { type: varchar, size: 255 }
      progress:             { type: enum, valueSet: "step1, step2, step3", default: step1, required: true }
      is_buyer_notified:         { type: boolean, default: false }
      is_seller_notified:        { type: boolean, default: false }

    uniques:
      shopping_order_U_1: [shopping_cart_id, collectible_id]

    propel_behaviors:
      timestampable:  ~
      archivable: { archive_class: ShoppingOrderArchive, archived_at_column: archived_at }

#  ShoppingOrderCollectible:
#      isCrossRef: true
#      columns:
#        shopping_order_id:         { type: integer, required: true, foreignClass: ShoppingOrder, foreignReference: id, onDelete: cascade, primaryKey: true }
#        collectible_id:            { type: integer, required: true, foreignClass: Collectible, foreignReference: id, onDelete: cascade, primaryKey: true }
#        price_amount:              { type: integer, required: true, default: 0 }
#        price_currency:            { type: char, size: 3, required: true, default: 'USD' }
#        tax_amount:                { type: integer, required: true, default: 0 }
#        shipping_country_iso3166:  { type: char, size: 2, required: false, foreignTable: geo_country, foreignReference: iso3166 }
#        shipping_fee_amount:       { type: integer, required: true, default: 0 }
#
#      propel_behaviors:
#        timestampable:  ~

  ShoppingPayment:
    columns:
      id:  ~
      shopping_order_id:   { type: integer, required: true, foreignClass: ShoppingOrder, foreignReference: id, onDelete: restrict }
      cookie_uuid:         { type: varchar, size: 32, required: false }
      processor:           { type: enum, valueSet: "PayPal, Google, Amazon", default: PayPal, required: true }
      status:              { type: enum, valueSet: "initialized, inprogress, confirmed, cancelled, failed, completed", default: initialized, required: true }
      currency:            { type: char, size: 3, default: USD }
      amount_total:        { type: integer, required: true, default: 0 }
      amount_collectibles: { type: integer, required: true, default: 0 }
      amount_shipping_fee: { type: integer, required: true, default: 0 }
      amount_tax:          { type: integer, required: true, default: 0 }

    propel_behaviors:
      extra_properties: ~
      timestampable:  ~
      archivable: { archive_class: ShoppingPaymentArchive, archived_at_column: archived_at }

  ShippingReference:
    columns:
      id:                   ~
      model:                { type: char,    size: 64, required: true }
      model_id:             { type: integer, required: true }
      country_iso3166:      { type: char,    size: 2, required: true, foreignTable: geo_country, foreignReference: iso3166 } # ZZ = international
      # should always be mirrored to shopping_cart_collectible.shipping_type
      shipping_type:        { type: enum,    required: true, valueSet: "no_shipping, local_pickup_only, flat_rate, calculated_shipping" }
    uniques:
      foreign_model_country: [ model, model_id, country_iso3166 ]

  ShippingRate:
    columns:
      id:                   ~
      shipping_reference_id: { type: integer, required: true, foreignClass: ShippingReference, foreignReference: id, onDelete: cascade }
      shipping_carrier_service_id: { type: integer, required: false, foreignClass: ShippingCarrierService, foreignReference: id, onDelete: cascade }
      flat_rate_in_cents:   { type: integer, required: false }
      is_free_shipping:     { type: boolean, required: true, default: false }

  ShippingCarrierService:
    columns:
      id:                   ~
      carrier:              { type: enum,         required: true, valueSet: "FedEx, UPS, USPS, DHL" }
      service_name:         { type: varchar(255), required: true, primaryString: true }
      service_key:          { type: varchar(255), required: true }
      is_international:     { type: boolean,      required: true, default: false }

  Package:
    columns:
      id:  ~
      plan_type:            { type: char, sqlType: "ENUM('Casual','Power')", default: NULL, required: true }
      package_name:         { type: varchar, size: 255, required: true, primaryString: true }
      package_description:  { type: longvarchar }
      credits:              { type: integer, required: true, default: 0 }
      package_price:        { type: float }

    propel_behaviors:
      timestampable:  ~

  PackageTransaction:
    columns:
      id:  ~
      package_id:               { type: integer, foreignClass: Package, foreignReference: id, required: true, onDelete: restrict }
      collector_id:             { type: integer, foreignClass: Collector, foreignReference: id, required: true, onDelete: cascade }
      payment_status:           { type: enum,    valueSet: "pending, paid, cancelled, processing", default: pending }
      credits:                  { type: integer, required: true, default: 0 }
      credits_used:             { type: integer, required: true, default: 0 }
      package_price:            { type: float }
      discount:                 { type: float,   required: false, sqlType: 'float unsigned' }
      promotion_transaction_id: { type: integer, required: false, foreignClass: PromotionTransaction, foreignReference: id, onDelete: restrict }
      expiry_date:              { type: timestamp }
      created_at:  ~

    propel_behaviors:
      aggregate_column:
        name:                   credits_used
        foreign_table:          package_transaction_credit
        expression:             "COUNT(id)"

  PackageTransactionCredit:
    columns:
      id:  ~
      package_transaction_id:   { type: integer,  foreignClass: PackageTransaction, foreignReference: id, required: true, onDelete: cascade }
      collectible_id:           { type: integer,  foreignClass: Collectible,        foreignReference: id, required: false, onDelete: setnull }
      expiry_date:              { type: timestamp }
      created_at:  ~

  Promotion:
    columns:
      id:  ~
      promotion_code:   { type: varchar, size: 255, required: true }
      promotion_name:   { type: varchar, size: 255, required: true, primaryString: true }
      promotion_desc:   { type: longvarchar }
      amount:           { type: float}
      amount_type:      { type: char, sqlType: "ENUM('Fix','Percentage')", default: Fix, required: true }
      no_of_time_used:  { type: integer }
      expiry_date:      { type: timestamp }

    uniques:
      promotion_U_I: [promotion_code]

    propel_behaviors:
      timestampable:  ~

  PromotionTransaction:
    columns:
      id:  ~
      promotion_id:  { type: integer, foreignClass: Promotion, foreignReference: id, required: true, onDelete: restrict }
      collector_id:  { type: integer, foreignClass: Collector, foreignReference: id, required: true, onDelete: cascade }
      amount:        { type: float }
      amount_type:   { type: varchar, default: pending, size: 255 }
      created_at:  ~
